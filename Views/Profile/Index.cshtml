@model Facelift_App.Models.ProfileVM


<div class="container-fluid">

<div class="d-sm-flex align-items-center justify-content-between mb-4">
<h1 class="h3 mb-0 text-gray-800">@ViewBag.Title</h1>
</div>

<div class="row mb-4">
<div class="col-xs-12 col-lg-12">
    <div class="card shadow border-left-info">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">User Information</h6>
        </div>
        <div class="card-body">
            <div class="row" id="usrProfile">
                <div class="col-xs-6 col-lg-6">
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Username</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Email</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.UserEmail, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Full Name</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Role Name</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.RoleName, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Last Visited Page</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.LastVisitUrl, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Last Visited At</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.LastVisitAt, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                </div>
                <div class="col-xs-6 col-lg-6">
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Last Login At</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.LastLoginAt, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Password Changed At</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ChPassAt, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Created By</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Created At</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Modified By</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ModifiedBy, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Modified At</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.ModifiedAt, new { htmlAttributes = new { @class = "form-control-plaintext", @readonly = "" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>



</div>

<div class="row mb-2">
<div class="col-xs-6 col-lg-6">
    @using (Html.BeginForm("ChangePassword", null, FormMethod.Post, new { id = "chPassFrm" }))
    {
        @Html.AntiForgeryToken()
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
        <div class="card shadow border-left-primary">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Change Password</h6>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <label class="col-form-label col-sm-4">Current Password</label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.CurrentPassword, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.CurrentPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-form-label col-sm-4">New Password</label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-form-label col-sm-4">Password Confirmation</label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.PasswordConfirmation, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PasswordConfirmation, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="fa-pull-right">
                    <button type="button" onclick="resetForm()" class="btn btn-warning btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-backspace"></i>
                        </span>
                        <span class="text">Cancel</span>
                    </button>
                    <button type="button" onclick="submitChPass()" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-save"></i>
                        </span>
                        <span class="text">Save</span>
                    </button>
                </div>
            </div>
        </div>
    }
</div>
<div class="col-xs-6 col-lg-6">
    @using (Html.BeginForm("ChangeDefaultWarehouse", null, FormMethod.Post, new { id = "chWhFrm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.WarehouseId, new { @id = "WarehouseId" })
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
        <div class="card shadow border-left-warning">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Change Default Warehouse</h6>
            </div>
            <div class="card-body">
                <div class="form-group row">
                    <label class="col-form-label col-sm-4">Default Warehouse</label>
                    <div class="dropdown" style="margin-top:3px;">
                        <button class="btn btn-info btn-sm dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Selected : <span id="selectedWh">None</span>
                        </button>
                        <div class="dropdown-menu scrollable-dd">
                            @if (ViewBag.WarehouseList != null)
                            {
                                foreach (var wh in ViewBag.WarehouseList)
                                {
                                    string state = "";
                                    if (wh.WarehouseId.Equals(Model.WarehouseId))
                                    {
                                        state = "active";
                                    }

                                    <button type="button" class="dropdown-item whAccess @(state)" data-value="@wh.WarehouseId">@wh.MsWarehouse.WarehouseName</button>
                                }
                            }
                            else
                            {
                                <span class="dropdown-item disabled text-sm-left">No access.</span>
                            }
                        </div>
                    </div>
                    @Html.ValidationMessageFor(model => model.WarehouseId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="card-footer">
                <div class="fa-pull-right">
                    <button type="button" onclick="resetDropdown()" class="btn btn-warning btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-backspace"></i>
                        </span>
                        <span class="text">Cancel</span>
                    </button>
                    <button type="button" onclick="submitChWarehouse()" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-save"></i>
                        </span>
                        <span class="text">Save</span>
                    </button>
                </div>
            </div>
        </div>
    }
</div>
</div>

</div>

@Html.Partial("ConfirmationModal")

@section custom_css
{
@Styles.Render("~/Content/vendor/toastr/toastr.css")
<style>

#usrProfile .col-form-label {
    font-weight: bold;
}

.scrollable-dd {
    height: auto;
    max-height: 200px;
    overflow-x: hidden;
}
</style>
}

@section custom_js
{
@*@Scripts.Render("~/Content/vendor/inputmask/js/jquery.inputmask.bundle.js")*@
@Scripts.Render("~/Scripts/jquery.validate.js")
@Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
@Scripts.Render("~/Content/vendor/toastr/toastr.min.js")
@Scripts.Render("~/Content/custom/js/notification.js")
<script>
    let defWh = '@Model.WarehouseId';
    let selWh = '@Model.WarehouseId';

    if (selWh) {
        let txt = $(".whAccess[data-value='" + selWh + "']").text();
        if (!txt)
            txt = "None";

        $('#selectedWh').text(txt);
    }

    $('.whAccess').click(function (ev) {
        var id = $(this).data('value');
        var txt = $(this).text();
        if (selWh != id) {
            selWh = id;
            $('.whAccess').removeClass('active');
            $(this).addClass('active');
            $('#selectedWh').text(txt);
            $('#WarehouseId').val(id);
        } else {
            ev.preventDefault();
        }

    });
    function resetForm() {
        $('#chPassFrm')[0].reset();
    }

    function resetDropdown() {
        if (defWh) {
            let txt = $(".whAccess[data-value='" + defWh + "']").text();
            if (!txt)
                txt = "None";

            $('#selectedWh').text(txt);
            $('.whAccess').removeClass('active');
            $(".whAccess[data-value='" + defWh + "']").addClass('active');
            selWh = defWh;
        }
    }

    $('#btnModalSave').click(function () {
        let formName = $(selectedForm).attr('id');
        if (formName == "chPassFrm")
            changePassword(selectedForm);
        else if (formName == "chWhFrm")
            changeWarehouse(selectedForm);
    });

    let selectedForm;

    function submitChPass() {
        let form = $('#chPassFrm');
        $.validator.unobtrusive.parse(form);
        if ($(form).valid()) {
            selectedForm = form[0];
            $('#confirmationModal').modal('show');
        } else {
            notify("Info", "info", "Please complete form below.");
        }
    }

    function submitChWarehouse() {
        let form = $('#chWhFrm');
        $.validator.unobtrusive.parse(form);
        if ($(form).valid()) {
            selectedForm = form[0];
            $('#confirmationModal').modal('show');
        } else {
            notify("Info", "info", "Please complete form below.");
        }
    }

    function changePassword(form) {
        $("#preloader").show();
        $.ajax({
            type: 'POST',
            url: form.action,
            data: $(form).serialize(),
            success: function (response) {

                if (response.stat) {
                    $("#preloader").fadeOut("slow");
                    notify("Success", "success", response.msg);
                    $('#confirmationModal').modal('hide');
                    resetForm();
                } else {
                    notify("Warning", "warning", response.msg);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                notify("Error", "error", "Oops! Something went wrong.");
            },
            complete: function () {
                $("#preloader").fadeOut("slow");
            }
        });
    }

    function changeWarehouse(form) {
        $("#preloader").show();
        $.ajax({
            type: 'POST',
            url: form.action,
            data: $(form).serialize(),
            success: function (response) {

                if (response.stat) {
                    defWh = selWh;
                    $("#preloader").fadeOut("slow");
                    notify("Success", "success", response.msg);
                    $('#confirmationModal').modal('hide');
                } else {
                    notify("Warning", "warning", response.msg);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                notify("Error", "error", "Oops! Something went wrong.");
            },
            complete: function () {
                $("#preloader").fadeOut("slow");
            }
        });
    }

    $(document).ready(function () {

        //add bootstrap 4 validation css
        $('#chPassFrm').validate().settings.errorClass += ' is-invalid';
        $('#chPassFrm').validate().settings.validClass += ' is-valid';


    });
</script>
}
