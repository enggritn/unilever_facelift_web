@model Facelift_App.Models.RoleVM

@{
    ViewBag.Title += " - Detail";
}

<div class="container-fluid">

    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">@ViewBag.Title</h1>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainFrm" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" name="x" value="@ViewBag.Id" />
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
        <div class="row mb-3">
            <div class="col-xs-6 col-lg-6">
                <div class="card shadow border-left-primary">
                    <div class="card-body">
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Role Name</label>
                            <div class="col-sm-8">
                                @Html.EditorFor(model => model.RoleName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Role Description <span class="text-info">(Optional)</span></label>
                            <div class="col-sm-8">
                                @Html.TextAreaFor(model => model.RoleDescription, new { @class = "form-control", @autocomplete = "off", @rows = 3 })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="offset-4 col-sm-8">
                                <div class="custom-control custom-checkbox">
                                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "custom-control-input" })
                                    <label class="custom-control-label" for="IsActive">Is Active</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-lg-12">
                <div class="d-sm-flex align-items-center justify-content-between mb-1">
                    <h5 class="h6 mb-0 text-gray-800">Menu Permission <span class="text-info">(Optional)</span></h5>
                </div>
            </div>
        </div>
        <div class="row mb-2">
            @if (Model.MenuList != null)
            {
                foreach (var mainMenu in Model.MenuList)
                {
                    <div class="col-xs-3 col-lg-3 mb-2">
                        <div class="card shadow border-left-info">
                            <div class="card-header">
                                <h6 class="m-0 font-weight-bold text-info">@mainMenu.MenuName</h6>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive-sm">
                                    <table class="table table-sm">
                                        <tbody>
                                            <tr>
                                                <td>Check All</td>
                                                <td>
                                                    <div class="form-group row">
                                                        <div class="offset-2 col-sm-10">
                                                            <label class="switch">
                                                                <input type="checkbox" class="chkAllMenu" />
                                                                <span class="slider round"></span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            @if (mainMenu.MsMenus.Any())
                                            {
                                                foreach (var menu in mainMenu.MsMenus)
                                                {
                                                    <tr>
                                                        <td>@menu.MenuName</td>
                                                        <td>
                                                            <div class="form-group row">
                                                                <div class="offset-2 col-sm-10">
                                                                    <label class="switch">
                                                                        <input type="checkbox" class="chkMenu" name="MenuIds" value="@menu.MenuId" @(Model.MenuIds.Contains(menu.MenuId) ? "checked" : "") />
                                                                        <span class="slider round"></span>
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }

        </div>
        <div class="row mb-4">
            <div class="col-xs-12 col-lg-12">
                <button type="button" onclick="goBack()" class="btn btn-info btn-icon-split">
                    <span class="icon text-white-50">
                        <i class="fas fa-arrow-left"></i>
                    </span>
                    <span class="text">Back</span>
                </button>
                <div class="fa-pull-right">
                    <button type="button" onclick="resetForm()" class="btn btn-warning btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-backspace"></i>
                        </span>
                        <span class="text">Cancel</span>
                    </button>
                    <button type="button" onclick="submitForm()" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-save"></i>
                        </span>
                        <span class="text">Save</span>
                    </button>
                </div>
            </div>
        </div>
    }

</div>

@Html.Partial("ConfirmationModal")

@section custom_css
{
    @Styles.Render("~/Content/vendor/toastr/toastr.css")
    @Styles.Render("~/Content/custom/css/toggle.css")
}

@section custom_js
{
    @Scripts.Render("~/Scripts/jquery.validate.js")
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
    @Scripts.Render("~/Content/vendor/toastr/toastr.min.js")
    @Scripts.Render("~/Content/custom/js/notification.js")
    <script>

        $(document).ready(function () {
            let permissionTbl = $('.chkAllMenu').closest('table');
            $(permissionTbl).each(function (e, v) {
                autoCheckAll(v);
            });

            //add bootstrap 4 validation css
            $('#mainFrm').validate().settings.errorClass += ' is-invalid';
            //$('#mainFrm').validate().settings.validClass += ' is-valid';
            $('#mainFrm').keypress(function (e) {
                var key = e.charCode || e.keyCode || 0;
                if (key == 13) {
                    e.preventDefault();
                }
            });
        });

        function goBack() {
           location.href = '@Url.Action("Index")';
        }


        function resetForm() {
            $("#preloader").show();
            location.reload();
        }

        function submitForm() {
            let form = $('#mainFrm');
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $('#confirmationModal').modal('show');
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        }

        $('#btnModalSave').click(function () {
            let form = $('#mainFrm');
            //double validation, prevent duplication
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                saveData(form);
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        });

        function saveData(form) {
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        $("#preloader").fadeOut("slow");
                        notify("Success", "success", response.msg);
                        $('#confirmationModal').modal('hide');
                    } else {
                        notify("Warning", "warning", response.msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                }
            });
        }

        $('.chkAllMenu').click(function (e) {
            let table = $(e.target).closest('table');
            $('td input:checkbox', table).prop('checked', this.checked);
        });

        $('.chkMenu').click(function (e) {
            let table = $(e.target).closest('table');
            autoCheckAll(table);
        });

        function autoCheckAll(table) {
            let chkAllMenu = $(table).find('.chkAllMenu');
            let totalChBox = $(table).find('.chkMenu').length;
            let totalChecked = $(table).find('.chkMenu:checked').length;
            $(chkAllMenu).prop('checked', totalChBox == totalChecked);
        }

    </script>
}