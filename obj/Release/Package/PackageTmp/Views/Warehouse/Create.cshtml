@model Facelift_App.Models.WarehouseVM

@{
    ViewBag.Title += " - Create";
}



<div class="container-fluid">

    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">@ViewBag.Title</h1>
    </div>

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainFrm" }))
    {
        @Html.AntiForgeryToken()
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
        <div class="row mb-2">
            <div class="col-xs-6 col-lg-6">
                <div class="card shadow border-left-primary">
                    <div class="card-body">
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Category</label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(model => model.CategoryId, (SelectList)ViewBag.CategoryList, "Please select", htmlAttributes: new { @class = "form-control sel2" })
                                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Warehouse Name</label>
                            <div class="col-sm-8">
                                @Html.EditorFor(model => model.WarehouseName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.WarehouseName, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Warehouse Alias <span class="text-warning">(Max 4 Character)</span></label>
                            <div class="col-sm-8">
                                @Html.EditorFor(model => model.WarehouseAlias, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.WarehouseAlias, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Address <span class="text-info">(Optional)</span></label>
                            <div class="col-sm-8">
                                @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @autocomplete = "off", @rows = 5 })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Phone <span class="text-info">(Optional)</span></label>
                            <div class="col-sm-8">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">PIC 1</label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(model => model.PIC1, (SelectList)ViewBag.UserList, "Please select", htmlAttributes: new { @class = "form-control sel2" })
                                @Html.ValidationMessageFor(model => model.PIC1, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>

                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">PIC 2</label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(model => model.PIC2, (SelectList)ViewBag.UserList, "Please select", htmlAttributes: new { @class = "form-control sel2" })
                                @Html.ValidationMessageFor(model => model.PIC2, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-sm-4">Fix Capacity</label>
                            <div class="col-sm-8">
                                @Html.EditorFor(model => model.MaxCapacity, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MaxCapacity, "", new { @class = "help-block text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-lg-12 mt-3">
                <div class="d-sm-flex align-items-center justify-content-between mb-1">
                    <h5 class="h6 mb-0 text-gray-800">Billing Configuration</h5>
                </div>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-xs-6 col-lg-6 mb-2">
                <div class="card shadow border-left-info">
                    <div class="card-body">
                        <div class="table-responsive-sm">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Pallet Owner</th>
                                        <th>Billable</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.CompanyList != null)
                                    {
                                        foreach (var company in Model.CompanyList)
                                        {
                                            <tr>
                                                <td>@company.CompanyName</td>
                                                <td>
                                                    <div class="form-group row">
                                                        <div class="offset-2 col-sm-10">
                                                            <label class="switch">
                                                                <input type="checkbox" class="chkCompany" name="CompanyIds" value="@company.CompanyId" />
                                                                <span class="slider round"></span>
                                                            </label>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>


        </div>
        <div class="row mb-4">
            <div class="col-xs-6 col-lg-6">
                <button type="button" onclick="goBack()" class="btn btn-info btn-icon-split">
                    <span class="icon text-white-50">
                        <i class="fas fa-arrow-left"></i>
                    </span>
                    <span class="text">Back</span>
                </button>
                <div class="fa-pull-right">
                    <button type="button" onclick="resetForm()" class="btn btn-warning btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-backspace"></i>
                        </span>
                        <span class="text">Cancel</span>
                    </button>
                    <button type="button" onclick="submitForm()" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-save"></i>
                        </span>
                        <span class="text">Save</span>
                    </button>
                </div>
            </div>
        </div>
    }

</div>

@Html.Partial("ConfirmationModal")



@section custom_css
{
    @Styles.Render("~/Content/vendor/select2/css/select2.css")
    @Styles.Render("~/Content/vendor/select2/css/select2-bootstrap.css")
    @Styles.Render("~/Content/vendor/toastr/toastr.css")
    @Styles.Render("~/Content/custom/css/toggle.css")
}

@section custom_js
{
    @Scripts.Render("~/Content/vendor/select2/js/select2.js")
    @Scripts.Render("~/Content/vendor/inputmask/js/jquery.inputmask.bundle.js")
    @Scripts.Render("~/Scripts/jquery.validate.js")
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
    @Scripts.Render("~/Content/vendor/toastr/toastr.min.js")
    @Scripts.Render("~/Content/custom/js/notification.js")
    <script>

    $(document).ready(function () {

        $('.number').inputmask("9{*}", { "placeholder": "" });

        //add bootstrap 4 validation css
        $('#mainFrm').validate().settings.errorClass += ' is-invalid';
        //$('#mainFrm').validate().settings.validClass += ' is-valid';

        $('#mainFrm').keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key == 13) {
                e.preventDefault();
            }
        });


        $('.sel2').select2({
            theme: "bootstrap"
        }).change(function () {
            $(this).valid();
        });

    });

        $(".sel2").change(function () {
            $(this).valid();
        });

        function goBack() {
            location.href = '@Url.Action("Index")';
        }

        function resetForm() {
            $('#mainFrm')[0].reset();
            $('#mainFrm .form-group input').removeClass('is-invalid');
            $('#mainFrm .help-block').html('');
        }

        function submitForm() {
            let form = $('#mainFrm');
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $('#confirmationModal').modal('show');
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        }

        $('#btnModalSave').click(function () {
            let form = $('#mainFrm');
            //double validation, prevent duplication
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                saveData(form);
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        });

        function saveData(form) {
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        $("#preloader").fadeOut("slow");
                        notify("Success", "success", response.msg);
                        $('#confirmationModal').modal('hide');
                        resetForm();
                    } else {
                        notify("Warning", "warning", response.msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                }
            });
        }


    </script>
}