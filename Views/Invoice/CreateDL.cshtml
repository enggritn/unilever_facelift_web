@model Facelift_App.Models.BillingRentVM


@{
    ViewBag.Title += " - Create (" + @Model.AgingType + ")";
}

@{string[] months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec" };}

<div class="container-fluid">

    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">@ViewBag.Title</h1>
    </div>

    <div class="row mb-3">
        <div class="col-xs-6 col-lg-6">
            <button type="button" onclick="goBack()" class="btn btn-info btn-icon-split">
                <span class="icon text-white-50">
                    <i class="fas fa-arrow-left"></i>
                </span>
                <span class="text">Back</span>
            </button>
        </div>
    </div>
    <div class="row mb-4">
        <div class="col-xs-6 col-lg-6">
            <div class="card shadow border-left-primary">
                <div class="card-body">
                    <div class="row mt-3 mb-3">
                        <div class="col-xs-12 col-lg-12">
                            @using (Html.BeginForm("CreateRent", "Invoice", FormMethod.Post, new { id = "mainFrm" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.HiddenFor(m => m.AgingType)
                                <div class="form-group row">
                                    <label class="col-form-label col-sm-4">Warehouse</label>
                                    <div class="col-sm-8">
                                        @Html.TextBoxFor(m => m.WarehouseName, new { @class = "form-control-plaintext", @readonly = "" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-form-label col-sm-4">Year</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" name="currentYear">
                                            @for (int i = 2020; i <= DateTime.Now.Year; i++)
                                            {
                                                if (DateTime.Now.Year.Equals(i))
                                                {
                                                    <option value="@i" selected>@i</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => model.CurrentYear, "", new { @class = "help-block text-danger" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-form-label col-sm-4">Month</label>
                                    <div class="col-sm-8">
                                        <select class="form-control" name="currentMonth">
                                            @for (int i = 1; i <= 12; i++)
                                            {
                                                if (DateTime.Now.Month.Equals(i))
                                                {
                                                    <option value="@i" selected>@months[i - 1]</option>
                                                }
                                                else
                                                {
                                                    <option value="@i">@months[i - 1]</option>
                                                }
                                            }
                                        </select>
                                        @Html.ValidationMessageFor(model => model.CurrentMonth, "", new { @class = "help-block text-danger" })
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <label class="col-form-label col-sm-4">Tax (%)</label>
                                    <div class="col-sm-8">
                                        @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                                        @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "help-block text-danger" })
                                    </div>
                                </div>
                                if (Model.AgingType.Equals("UNUSED"))
                                {
                                    <div class="form-group row">
                                        <label class="col-form-label col-sm-4">Payment Weight (%)</label>
                                        <div class="col-sm-8">
                                            @Html.TextBoxFor(m => m.Payment, new { @class = "form-control-plaintext", @readonly = "" })
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label class="col-form-label col-sm-4">Remarks</label>
                                        <div class="col-sm-8">
                                            @Html.Raw(Model.Remarks);
                                        </div>
                                    </div>
                                }

                                <div class="row mt-4">
                                    <div class="col-md-12">
                                        <div class="fa-pull-right">
                                            <button type="button" onclick="resetForm()" class="btn btn-warning btn-icon-split">
                                                <span class="icon text-white-50">
                                                    <i class="fas fa-backspace"></i>
                                                </span>
                                                <span class="text">Cancel</span>
                                            </button>
                                            <button type="button" onclick="submitForm()" class="btn btn-primary btn-icon-split">
                                                <span class="icon text-white-50">
                                                    <i class="fas fa-save"></i>
                                                </span>
                                                <span class="text">Save</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>
@Html.Partial("ConfirmationModal")

@section custom_css
{
    @Styles.Render("~/Content/vendor/toastr/toastr.css")
    <style>
        .is-invalid .select2-selection,
        .needs-validation ~ span > .select2-dropdown {
            border-color: red !important;
        }
    </style>
}
@section custom_js
{
    @Scripts.Render("~/Content/vendor/inputmask/js/jquery.inputmask.bundle.js")
    @Scripts.Render("~/Scripts/jquery.validate.js")
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
    @Scripts.Render("~/Content/vendor/toastr/toastr.min.js")
    @Scripts.Render("~/Content/custom/js/notification.js")
    <script>

        $(document).ready(function () {

            $('.number').inputmask("9{*}", { "placeholder": "" });
            //add bootstrap 4 validation css
            $('#mainFrm').validate().settings.errorClass += ' is-invalid';


            //$('#mainFrm').validate().settings.validClass += ' is-valid';

            $('#mainFrm').keypress(function (e) {
                var key = e.charCode || e.keyCode || 0;
                if (key == 13) {
                    e.preventDefault();
                }
            });



        });


        function goBack() {
            location.href = '@Url.Action("Index")';
        }

        function resetForm() {
            $('#mainFrm')[0].reset();
            $('#mainFrm .form-group input').removeClass('is-invalid');
            $('#mainFrm .help-block').html('');

        }


        function submitForm() {
            let form = $('#mainFrm');
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $('#confirmationModal #confirmationModalMsg').text("Are you sure ? Create invoice cannot be undone, invoice only can be created once per month.");
                $('#confirmationModal').modal('show');
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        }

        $('#btnModalSave').click(function () {
            let form = $('#mainFrm')[0];
            //double validation, prevent duplication
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                saveData(form);
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        });

        function saveData(form) {
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        location.href = '@Url.Action("Detail")?type=used&x=' + response.transactionId;

                        //resetForm();
                    } else {
                        notify("Warning", "warning", response.msg);
                        $("#preloader").fadeOut("slow");
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                    $("#preloader").fadeOut("slow");
                },
                complete: function () {
                    //$("#preloader").fadeOut("slow");
                }
            });
        }


    </script>
}