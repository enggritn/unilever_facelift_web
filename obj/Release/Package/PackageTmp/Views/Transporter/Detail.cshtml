@model Facelift_App.Models.TransporterVM

@{
    ViewBag.Title += " - Detail";
}

    <div class="container-fluid">

        <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">@ViewBag.Title</h1>
        </div>


        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "mainFrm" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" name="x" value="@ViewBag.Id" />
            @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
            <div class="row mb-2">
                <div class="col-xs-6 col-lg-6">
                    <div class="card shadow border-left-primary">
                        <div class="card-body">
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">Transporter Name</label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.TransporterName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.TransporterName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">Address <span class="text-info">(Optional)</span></label>
                                <div class="col-sm-8">
                                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control", @autocomplete = "off", @rows = 5 })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">Phone</label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">Email</label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">PIC</label>
                                <div class="col-sm-8">
                                    @Html.EditorFor(model => model.PIC, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.PIC, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group row">
                                <div class="offset-4 col-sm-8">
                                    <div class="custom-control custom-checkbox">
                                        @Html.CheckBoxFor(model => model.IsActive, new { @class = "custom-control-input" })
                                        <label class="custom-control-label" for="IsActive">Is Active</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="row mb-2">
                <div class="col-xs-6 col-lg-6">
                    <div class="card shadow border-left-warning">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6 mb-2">
                                    <span class="text-muted">Not Selected</span>
                                    <select id="sbOne" class="form-control" multiple="multiple" size="10">
                                        @if (ViewBag.UnSelectedWarehouseList != null)
                                        {
                                            foreach (var item in ViewBag.UnSelectedWarehouseList)
                                            {
                                                <option value="@item.WarehouseId">@(item.WarehouseCode) - @(item.WarehouseName)</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <span class="text-muted">Selected</span>
                                    <select id="sbTwo" class="form-control" name="WarehouseIds" multiple="multiple" size="10">
                                        @if (ViewBag.SelectedWarehouseList != null)
                                        {
                                            foreach (var item in ViewBag.SelectedWarehouseList)
                                            {
                                                <option value="@item.WarehouseId">@(item.WarehouseCode) - @(item.WarehouseName)</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="row text-center mt-2">
                                <div class="col-md-12">
                                    <button type="button" class="btn btn-outline-dark" id="left"><</button>
                                    <button type="button" class="btn btn-outline-dark" id="right">></button>
                                </div>
                            </div>
                            <div class="row text-center mt-2">
                                <div class="col-md-12">
                                    <button type="button" class="btn btn-outline-dark" id="leftAll"><<</button>
                                    <button type="button" class="btn btn-outline-dark" id="rightAll">>></button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-xs-6 col-lg-6">
                    <button type="button" onclick="goBack()" class="btn btn-info btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-arrow-left"></i>
                        </span>
                        <span class="text">Back</span>
                    </button>
                    <div class="fa-pull-right">
                        <button type="button" onclick="resetForm()" class="btn btn-warning btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-backspace"></i>
                            </span>
                            <span class="text">Cancel</span>
                        </button>
                        <button type="button" onclick="submitForm()" class="btn btn-primary btn-icon-split">
                            <span class="icon text-white-50">
                                <i class="fas fa-save"></i>
                            </span>
                            <span class="text">Save</span>
                        </button>
                    </div>
                </div>
            </div>
        }

        <div class="row mb-4">
            <div class="col-xs-12 col-lg-12">
                <div class="card shadow border-left-warning">
                    <div class="card-body">
                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="tab-1" data-toggle="tab" href="#tab1" role="tab" aria-controls="tab1" aria-selected="true">Drivers</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="tab-2" data-toggle="tab" href="#tab2" role="tab" aria-controls="tab2" aria-selected="false">Trucks</a>
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane fade show active" id="tab1" role="tabpanel" aria-labelledby="tab-1">
                                <div class="row mt-3 mb-3">
                                    <div class="col-xs-12 col-lg-12">
                                        <div class="d-sm-flex align-items-center justify-content-between mb-1">
                                            <h5 class="h3 mb-0 text-gray-800">Driver List</h5>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3 mb-3">
                                    <div class="col-lg-12">
                                        <button type="button" class="btn btn-success btn-icon-split" onclick="AddDriver()">
                                            <span class="icon text-white-50">
                                                <i class="fas fa-plus"></i>
                                            </span>
                                            <span class="text">New</span>
                                        </button>
                                        <button type="button" class="btn btn-secondary btn-icon-split" onclick="RefreshDriver()">
                                            <span class="icon text-white-50">
                                                <i class="fas fa-sync"></i>
                                            </span>
                                            <span class="text">Refresh</span>
                                        </button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-12">
                                        <div class="table-responsive">
                                            <table class="table table-bordered table-striped" id="driverTable" width="100%" cellspacing="0">
                                                <thead class="thead-dark">
                                                    <tr>
                                                        <th>Driver Name</th>
                                                        <th>Phone</th>
                                                        <th>License Number (SIM)</th>
                                                        <th>Status</th>
                                                        <th>Created By</th>
                                                        <th>Created At</th>
                                                        <th>Modified By</th>
                                                        <th>Modified At</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="tab2" role="tabpanel" aria-labelledby="tab-2">
                                <div class="row mt-3 mb-3">
                                    <div class="col-xs-12 col-lg-12">
                                        <div class="d-sm-flex align-items-center justify-content-between mb-1">
                                            <h5 class="h3 mb-0 text-gray-800">Truck List</h5>
                                        </div>
                                    </div>
                                </div>

                                <div class="row mt-3 mb-3">
                                    <div class="col-lg-12">
                                        <button type="button" class="btn btn-success btn-icon-split" onclick="AddTruck()">
                                            <span class="icon text-white-50">
                                                <i class="fas fa-plus"></i>
                                            </span>
                                            <span class="text">New</span>
                                        </button>
                                        <button type="button" class="btn btn-secondary btn-icon-split" onclick="RefreshTruck()">
                                            <span class="icon text-white-50">
                                                <i class="fas fa-sync"></i>
                                            </span>
                                            <span class="text">Refresh</span>
                                        </button>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-lg-12">
                                        <div class="table-responsive">
                                            <table class="table table-bordered table-striped" id="truckTable" width="100%" cellspacing="0">
                                                <thead class="thead-dark">
                                                    <tr>
                                                        <th>Plate Number (No. Plat)</th>
                                                        <th>Status</th>
                                                        <th>Created By</th>
                                                        <th>Created At</th>
                                                        <th>Modified By</th>
                                                        <th>Modified At</th>
                                                        <th>Action</th>
                                                    </tr>
                                                </thead>
                                            </table>
                                        </div>

                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>


@Html.Partial("ConfirmationModal")

<!-- Driver Module Section -->
<!-- Modal Add Driver -->
<div class="modal" id="DriverModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create/ Modify Driver</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                @using (Html.BeginForm("SaveDriver", null, FormMethod.Post, new { id = "driverFrm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.transporterDriverVM.DriverId)
                    <input type="hidden" name="x" value="@ViewBag.Id" />
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Driver Name</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.transporterDriverVM.DriverName, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.transporterDriverVM.DriverName, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Phone</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.transporterDriverVM.Phone, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.transporterDriverVM.Phone, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">License Number (SIM)</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.transporterDriverVM.LicenseNumber, new { htmlAttributes = new { @class = "form-control number", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.transporterDriverVM.LicenseNumber, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="offset-4 col-sm-8">
                            <div class="custom-control custom-checkbox">
                                @Html.CheckBoxFor(model => model.transporterDriverVM.IsActive, new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="transporterDriverVM_IsActive">Is Active</label>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning btn-icon-split" onclick="resetFormDriver()">
                    <span class="icon text-white-50">
                        <i class="fas fa-backspace"></i>
                    </span>
                    <span class="text">Cancel</span>
                </button>
                <button type="button" class="btn btn-primary btn-icon-split" id="btnSaveDriver">
                    <span class="icon text-white-50">
                        <i class="fas fa-save"></i>
                    </span>
                    <span class="text">Save</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- End of Driver Module Section -->
<!-- Modal Truck Driver -->
<div class="modal" id="TruckModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create/ Modify Truck</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                @using (Html.BeginForm("SaveTruck", null, FormMethod.Post, new { id = "truckFrm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.transporterTruckVM.TruckId)
                    <input type="hidden" name="x" value="@ViewBag.Id" />
                    <div class="form-group row">
                        <label class="col-form-label col-sm-4">Plate Number (No. Plat)</label>
                        <div class="col-sm-8">
                            @Html.EditorFor(model => model.transporterTruckVM.PlateNumber, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.transporterTruckVM.PlateNumber, "", new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="offset-4 col-sm-8">
                            <div class="custom-control custom-checkbox">
                                @Html.CheckBoxFor(model => model.transporterTruckVM.IsActive, new { @class = "custom-control-input" })
                                <label class="custom-control-label" for="transporterTruckVM_IsActive">Is Active</label>
                            </div>
                        </div>
                    </div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning btn-icon-split" onclick="resetFormTruck()">
                    <span class="icon text-white-50">
                        <i class="fas fa-backspace"></i>
                    </span>
                    <span class="text">Cancel</span>
                </button>
                <button type="button" class="btn btn-primary btn-icon-split" id="btnSaveTruck">
                    <span class="icon text-white-50">
                        <i class="fas fa-save"></i>
                    </span>
                    <span class="text">Save</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- End of Truck Module Section -->

@section custom_css
{
    @Styles.Render("~/Content/vendor/toastr/toastr.css")
    @Styles.Render("~/Content/vendor/datatables/dataTables.bootstrap4.min.css")
    @Styles.Render("~/Content/vendor/datatables/fixedColumns.bootstrap4.min.css")

    <style>
        th, td {
            white-space: nowrap;
        }

        div.dataTables_wrapper {
            /*width: 800px;*/
            margin: 0 auto;
        }
    </style>
}

@section custom_js
{
    @Scripts.Render("~/Content/vendor/datatables/jquery.dataTables.min.js")
    @Scripts.Render("~/Content/vendor/datatables/dataTables.bootstrap4.min.js")
    @Scripts.Render("~/Content/vendor/datatables/dataTables.fixedColumns.min.js")
    @Scripts.Render("~/Content/vendor/inputmask/js/jquery.inputmask.bundle.js")
    @Scripts.Render("~/Scripts/jquery.validate.js")
    @Scripts.Render("~/Scripts/jquery.validate.unobtrusive.js")
    @Scripts.Render("~/Content/vendor/toastr/toastr.min.js")
    @Scripts.Render("~/Content/custom/js/notification.js")
    <script>

    $(document).ready(function () {

        $('.number').inputmask("9{*}", { "placeholder": "" });

        //add bootstrap 4 validation css
        $('#mainFrm').validate().settings.errorClass += ' is-invalid';
        //$('#mainFrm').validate().settings.validClass += ' is-valid';

        $('#driverFrm').validate().settings.errorClass += ' is-invalid';
        $('#truckFrm').validate().settings.errorClass += ' is-invalid';

        $('#mainFrm').keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key == 13) {
                e.preventDefault();
            }
        });

        $('#driverFrm').keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key == 13) {
                e.preventDefault();
            }
        });

        $('#truckFrm').keypress(function (e) {
            var key = e.charCode || e.keyCode || 0;
            if (key == 13) {
                e.preventDefault();
            }
        });

        $('#tab-1').on('shown.bs.tab', function (e) {
            RefreshDriver();
        });

        $('#tab-2').on('shown.bs.tab', function (e) {
            RefreshTruck();
        });
    });

        function goBack() {
            location.href = '@Url.Action("Index")';
        }

        function submitForm() {
            let form = $('#mainFrm');
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $('#confirmationModal').modal('show');
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        }

        function resetSelectBox(status) {
            $("#sbOne").find("option").prop("selected", status);
            $("#sbTwo").find("option").prop("selected", status);
        }

        function moveItems(origin, dest) {
            $(origin).find(':selected').appendTo(dest);
        }

        function moveAllItems(origin, dest) {
            $(origin).children().appendTo(dest);
        }

        $('#left').click(function () {
            let opts = $('#sbTwo').find('option:selected');
            if (opts.length == 0) {
                notify("Info", "info", "Please select at least 1 warehouse to moved.");
            } else {
                moveItems('#sbTwo', '#sbOne');
                resetDefault();
            }

        });

        $('#right').on('click', function () {
            let opts = $('#sbOne').find('option:selected');
            if (opts.length == 0) {
                notify("Info", "info", "Please select at least 1 warehouse to moved.");
            } else {
                moveItems('#sbOne', '#sbTwo');
                resetDefault();
            }

        });

        $('#leftAll').on('click', function () {
            moveAllItems('#sbTwo', '#sbOne');
            resetDefault();
        });

        $('#rightAll').on('click', function () {
            moveAllItems('#sbOne', '#sbTwo');
            resetDefault();
        });




        $('#btnModalSave').click(function () {
            let form = $('#mainFrm');
            //double validation, prevent duplication
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                saveData(form);
            } else {
                notify("Info", "info", "Please complete form below.");
            }
        });

        function resetForm() {
            $("#preloader").show();
            location.reload();
        }

        function saveData(form) {
            resetSelectBox(true);
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        $("#preloader").fadeOut("slow");
                        notify("Success", "success", response.msg);
                        $('#confirmationModal').modal('hide');
                        resetSelectBox(false);
                    } else {
                        notify("Warning", "warning", response.msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                }
            });
        }

        //Driver Module

        var tableDriver = $('#driverTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@Url.Action("DatatableDriver")',
                    type: "POST",
                    datatype: "json",
                    data: { "id" : '@ViewBag.Id'}
                },
                scrollY: "500px",
                scrollX: true,
                scrollCollapse: true,
                paging: true,
                //fixedColumns: true
                fixedColumns: {
                    leftColumns: 1,
                    rightColumns: 1
                },
               columnDefs: [
                   { "orderable": false, "targets": -1 },
               ],
           columns: [
               { "data": "DriverName", "name": "DriverName", "autoWidth": true },
                    { "data": "Phone", "name": "Phone", "autoWidth": true },
               { "data": "LicenseNumber", "name": "LicenseNumber", "autoWidth": true },
                    {
                        data: "IsActive",
                        name: "IsActive",
                        auto: true,
                        render: function (data, type, row) {
                            let badge = "";
                            let status = data;
                            if (status) {
                                badge = '<span class="badge badge-primary">Active</span>';
                            } else {
                                badge = '<span class="badge badge-danger">In Active</span>';
                            }
                            return badge;
                        }
                    },
                    { "data": "CreatedBy", "name": "CreatedBy", "autoWidth": true },
                    { "data": "CreatedAt", "name": "CreatedAt", "autoWidth": true },
                    { "data": "ModifiedBy", "name": "ModifiedBy", "autoWidth": true },
                    { "data": "ModifiedAt", "name": "ModifiedAt", "autoWidth": true },
                    {
                        data: null,
                        render: function (data, type, row) {
                            let button = "<button type=\"button\" class=\"btn btn-sm btn-info btn-icon-split\" onclick=\"DriverDetail('" + row.DriverId +"')\">";
                            button += '<span class="icon text-white-50"><i class="fas fa-edit"></i></span >';
                            button += '<span class="text">Detail</span></button >';
                            return button;
                        }
                    },

                ]
       });

        function resetFormDriver() {
            $('#DriverModal #driverFrm input').removeClass('is-invalid');
            $('#DriverModal #driverFrm .help-block').html('');
            if (SelectedDriverId) {
                LoadDriverDetail(SelectedDriverId);
            } else {
                $('#DriverModal #driverFrm')[0].reset();
                $('#DriverModal #driverFrm input[name="transporterDriverVM.DriverId"]').val(SelectedDriverId);
            }
        }

        function AddDriver() {
            $('#DriverModal #driverFrm input[name="transporterDriverVM.IsActive"]:checkbox').closest('.form-group').hide()
            $('#DriverModal #driverFrm input[name="transporterDriverVM.IsActive"]').prop('checked', false);
            if (SelectedDriverId) {
                $('#DriverModal #driverFrm')[0].reset();
            }
            SelectedDriverId = "";
            $('#DriverModal #driverFrm input[name="transporterDriverVM.DriverId"]').val(SelectedDriverId);
            $('#DriverModal').modal('show');
        }

        function RefreshDriver() {
            tableDriver.ajax.reload();
        }

        $('#btnSaveDriver').click(function () {
            let form = $('#DriverModal #driverFrm')[0];
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                submitDriverForm(form);
            } else {
                notify("Info", "info", "Please complete form.");
            }
        });

        let SelectedDriverId = "";

        function DriverDetail(id) {
            SelectedDriverId = id;
            LoadDriverDetail(id);
        }

        function LoadDriverDetail(id) {
            $("#preloader").show();
             $.get('@Url.Action("GetDriverDetail")', { x: id }, function (response) {
                 if (response.stat) {
                    $('#DriverModal #driverFrm input[name="transporterDriverVM.IsActive"]:checkbox').closest('.form-group').show()
                    $('#DriverModal #driverFrm input[name="transporterDriverVM.DriverId"]').val(response.data.DriverId);
                    $('#DriverModal #driverFrm input[name="transporterDriverVM.DriverName"]').val(response.data.DriverName);
                    $('#DriverModal #driverFrm input[name="transporterDriverVM.Phone"]').val(response.data.Phone);
                    $('#DriverModal #driverFrm input[name="transporterDriverVM.LicenseNumber"]').val(response.data.LicenseNumber);
                     $('#DriverModal #driverFrm input[name="transporterDriverVM.IsActive"]:checkbox').prop('checked', response.data.IsActive);
                    $('#DriverModal').modal('show');
                } else {
                    notify("Warning", "warning", response.msg);
                 }
                 $("#preloader").fadeOut("slow");
            });
        }


        function submitDriverForm(form) {
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        SelectedDriverId = "";
                        $("#preloader").fadeOut("slow");
                        notify("Success", "success", response.msg);
                        resetFormDriver();
                        $('#DriverModal').modal('hide');
                        RefreshDriver();
                    } else {
                        notify("Warning", "warning", response.msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                }
            });
        }


        //End of Driver Module



        //Truck Module

        var tableTruck = $('#truckTable').DataTable({
                processing: true,
                serverSide: true,
                ajax: {
                    url: '@Url.Action("DatatableTruck")',
                    type: "POST",
                    datatype: "json",
                    data: { "id" : '@ViewBag.Id'}
                },
                scrollY: "500px",
                scrollX: true,
                scrollCollapse: true,
                paging: true,
                //fixedColumns: true
                fixedColumns: {
                    leftColumns: 1,
                    rightColumns: 1
                },
               columnDefs: [
                   { "orderable": false, "targets": -1 },
               ],
           columns: [
               { "data": "PlateNumber", "name": "PlateNumber", "autoWidth": true },
                    {
                        data: "IsActive",
                        name: "IsActive",
                        auto: true,
                        render: function (data, type, row) {
                            let badge = "";
                            let status = data;
                            if (status) {
                                badge = '<span class="badge badge-primary">Active</span>';
                            } else {
                                badge = '<span class="badge badge-danger">In Active</span>';
                            }
                            return badge;
                        }
                    },
                    { "data": "CreatedBy", "name": "CreatedBy", "autoWidth": true },
                    { "data": "CreatedAt", "name": "CreatedAt", "autoWidth": true },
                    { "data": "ModifiedBy", "name": "ModifiedBy", "autoWidth": true },
                    { "data": "ModifiedAt", "name": "ModifiedAt", "autoWidth": true },
                    {
                        data: null,
                        render: function (data, type, row) {
                            let button = "<button type=\"button\" class=\"btn btn-sm btn-info btn-icon-split\" onclick=\"TruckDetail('" + row.TruckId +"')\">";
                            button += '<span class="icon text-white-50"><i class="fas fa-edit"></i></span >';
                            button += '<span class="text">Detail</span></button >';
                            return button;
                        }
                    },

                ]
       });

        function resetFormTruck() {
            $('#TruckModal #truckFrm input').removeClass('is-invalid');
            $('#TruckModal #truckFrm .help-block').html('');
            if (SelectedTruckId) {
                LoadTruckDetail(SelectedTruckId);
            } else {
                $('#TruckModal #truckFrm')[0].reset();
                $('#TruckModal #truckFrm input[name="transporterTruckVM.TruckId"]').val(SelectedTruckId);
            }
        }

        function AddTruck() {
            $('#TruckModal #truckFrm input[name="transporterTruckVM.IsActive"]:checkbox').closest('.form-group').hide()
            $('#TruckModal #truckFrm input[name="transporterTruckVM.IsActive"]').prop('checked', false);
            if (SelectedTruckId) {
                $('#TruckModal #truckFrm')[0].reset();
            }
            SelectedTruckId = "";
            $('#TruckModal #truckFrm input[name="transporterTruckVM.TruckId"]').val(SelectedTruckId);
            $('#TruckModal').modal('show');
        }

        function RefreshTruck() {
            tableTruck.ajax.reload();
        }

        $('#btnSaveTruck').click(function () {
            let form = $('#TruckModal #truckFrm')[0];
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                submitTruckForm(form);
            } else {
                notify("Info", "info", "Please complete form.");
            }
        });

        let SelectedTruckId = "";

        function TruckDetail(id) {
            SelectedTruckId = id;
            LoadTruckDetail(id);
        }

        function LoadTruckDetail(id) {
            $("#preloader").show();
             $.get('@Url.Action("GetTruckDetail")', { x: id }, function (response) {
                 if (response.stat) {
                    $('#TruckModal #truckFrm input[name="transporterTruckVM.IsActive"]:checkbox').closest('.form-group').show()
                    $('#TruckModal #truckFrm input[name="transporterTruckVM.TruckId"]').val(response.data.TruckId);
                     $('#TruckModal #truckFrm input[name="transporterTruckVM.PlateNumber"]').val(response.data.PlateNumber);
                     $('#TruckModal #truckFrm input[name="transporterTruckVM.IsActive"]:checkbox').prop('checked', response.data.IsActive);
                     $("#preloader").fadeOut("slow");
                    $('#TruckModal').modal('show');
                } else {
                    notify("Warning", "warning", response.msg);
                 }
            });
        }


        function submitTruckForm(form) {
            $("#preloader").show();
            $.ajax({
                type: 'POST',
                url: form.action,
                data: $(form).serialize(),
                success: function (response) {

                    if (response.stat) {
                        SelectedTruckId = "";
                        $("#preloader").fadeOut("slow");
                        notify("Success", "success", response.msg);
                        resetFormTruck();
                        $('#TruckModal').modal('hide');
                        RefreshTruck();
                    } else {
                        notify("Warning", "warning", response.msg);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    notify("Error", "error", "Oops! Something went wrong.");
                },
                complete: function () {
                    $("#preloader").fadeOut("slow");
                }
            });
        }


        //End of Truck Module


    </script>
}